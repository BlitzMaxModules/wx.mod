/*
  Copyright (c) 2007,2008 Bruce A Henderson
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/ 

#include "wxglue.h"
#include "wx/wxscintilla.h"
#include "../wxbitmap.mod/glue.h"

class MaxScintilla;

extern "C" {

#include <blitz.h>

	MaxScintilla * bmx_wxscintilla_create(BBObject * handle, wxWindow * parent, wxWindowID id, int x, int y, int w, int h, long style);

	int bmx_wxscintilla_getcurrentline(wxScintilla * sc);
	void bmx_wxscintilla_stylesetspec(wxScintilla * sc, int style, BBString * spec);
	void bmx_wxscintilla_stylesetfontfont(wxScintilla * sc, int style, MaxFont * font);
	void bmx_wxscintilla_stylesetfontattr(wxScintilla * sc, int style, int size, BBString * faceName, bool bold, bool italic, bool underline, wxFontEncoding encoding);
	void bmx_wxscintilla_stylesetfontencoding(wxScintilla * sc, int style, wxFontEncoding encoding);
	void bmx_wxscintilla_cmdkeyexecute(wxScintilla * sc, int cmd);
	void bmx_wxscintilla_setmargins(wxScintilla * sc, int leftMargin, int rightMargin);
	void bmx_wxscintilla_getselection(wxScintilla * sc, int * startPos, int * endPos);
	void bmx_wxscintilla_pointfromposition(wxScintilla * sc, int pos, int * x, int * y);
	void bmx_wxscintilla_scrolltoline(wxScintilla * sc, int line);
	void bmx_wxscintilla_scrolltocolumn(wxScintilla * sc, int column);
	void bmx_wxscintilla_setvscrollbar(wxScintilla * sc, wxScrollBar * bar);
	void bmx_wxscintilla_sethscrollbar(wxScintilla * sc, wxScrollBar * bar);
	bool bmx_wxscintilla_getlastkeydownprocessed(wxScintilla * sc);
	void bmx_wxscintilla_setlastkeydownprocessed(wxScintilla * sc, bool val);
	bool bmx_wxscintilla_savefile(wxScintilla * sc, BBString * filename);
	bool bmx_wxscintilla_loadfile(wxScintilla * sc, BBString * filename);
	void bmx_wxscintilla_setuseantialiasing(wxScintilla * sc, bool useAA);
	bool bmx_wxscintilla_getuseantialiasing(wxScintilla * sc);

//++Autogenerated
	void bmx_wxscintilla_addtext(wxScintilla * sc, BBString * text);
	void bmx_wxscintilla_inserttext(wxScintilla * sc, int pos, BBString * text);
	void bmx_wxscintilla_clearall(wxScintilla * sc);
	void bmx_wxscintilla_cleardocumentstyle(wxScintilla * sc);
	int bmx_wxscintilla_getlength(wxScintilla * sc);
	int bmx_wxscintilla_getcharat(wxScintilla * sc, int pos);
	int bmx_wxscintilla_getcurrentpos(wxScintilla * sc);
	int bmx_wxscintilla_getanchor(wxScintilla * sc);
	int bmx_wxscintilla_getstyleat(wxScintilla * sc, int pos);
	void bmx_wxscintilla_redo(wxScintilla * sc);
	void bmx_wxscintilla_setundocollection(wxScintilla * sc, bool collectUndo);
	void bmx_wxscintilla_selectall(wxScintilla * sc);
	void bmx_wxscintilla_setsavepoint(wxScintilla * sc);
	bool bmx_wxscintilla_canredo(wxScintilla * sc);
	int bmx_wxscintilla_markerlinefromhandle(wxScintilla * sc, int handle);
	void bmx_wxscintilla_markerdeletehandle(wxScintilla * sc, int handle);
	bool bmx_wxscintilla_getundocollection(wxScintilla * sc);
	int bmx_wxscintilla_getviewwhitespace(wxScintilla * sc);
	void bmx_wxscintilla_setviewwhitespace(wxScintilla * sc, int viewWS);
	int bmx_wxscintilla_positionfrompoint(wxScintilla * sc, int x, int y);
	int bmx_wxscintilla_positionfrompointclose(wxScintilla * sc, int x, int y);
	void bmx_wxscintilla_gotoline(wxScintilla * sc, int line);
	void bmx_wxscintilla_gotopos(wxScintilla * sc, int pos);
	void bmx_wxscintilla_setanchor(wxScintilla * sc, int posAnchor);
	BBString * bmx_wxscintilla_getcurline(wxScintilla * sc, int * index);
	int bmx_wxscintilla_getendstyled(wxScintilla * sc);
	void bmx_wxscintilla_converteols(wxScintilla * sc, int eolMode);
	int bmx_wxscintilla_geteolmode(wxScintilla * sc);
	void bmx_wxscintilla_seteolmode(wxScintilla * sc, int eolMode);
	void bmx_wxscintilla_startstyling(wxScintilla * sc, int pos, int mask);
	void bmx_wxscintilla_setstyling(wxScintilla * sc, int length, int style);
	bool bmx_wxscintilla_getbuffereddraw(wxScintilla * sc);
	void bmx_wxscintilla_setbuffereddraw(wxScintilla * sc, bool buffered);
	void bmx_wxscintilla_settabwidth(wxScintilla * sc, int tabWidth);
	int bmx_wxscintilla_gettabwidth(wxScintilla * sc);
	void bmx_wxscintilla_setcodepage(wxScintilla * sc, int codePage);
	void bmx_wxscintilla_markerdefine(wxScintilla * sc, int markerNumber, int markerSymbol);
	void bmx_wxscintilla_markersetforeground(wxScintilla * sc, int markerNumber, MaxColour * fore);
	void bmx_wxscintilla_markersetbackground(wxScintilla * sc, int markerNumber, MaxColour * back);
	int bmx_wxscintilla_markeradd(wxScintilla * sc, int line, int markerNumber);
	void bmx_wxscintilla_markerdelete(wxScintilla * sc, int line, int markerNumber);
	void bmx_wxscintilla_markerdeleteall(wxScintilla * sc, int markerNumber);
	int bmx_wxscintilla_markerget(wxScintilla * sc, int line);
	int bmx_wxscintilla_markernext(wxScintilla * sc, int lineStart, int markerMask);
	int bmx_wxscintilla_markerprevious(wxScintilla * sc, int lineStart, int markerMask);
	void bmx_wxscintilla_markerdefinebitmap(wxScintilla * sc, int markerNumber, MaxBitmap * bitmap);
	void bmx_wxscintilla_markeraddset(wxScintilla * sc, int line, int set);
	void bmx_wxscintilla_markersetalpha(wxScintilla * sc, int markerNumber, int alpha);
	void bmx_wxscintilla_setmargintype(wxScintilla * sc, int margin, int marginType);
	int bmx_wxscintilla_getmargintype(wxScintilla * sc, int margin);
	void bmx_wxscintilla_setmarginwidth(wxScintilla * sc, int margin, int pixelWidth);
	int bmx_wxscintilla_getmarginwidth(wxScintilla * sc, int margin);
	void bmx_wxscintilla_setmarginmask(wxScintilla * sc, int margin, int mask);
	int bmx_wxscintilla_getmarginmask(wxScintilla * sc, int margin);
	void bmx_wxscintilla_setmarginsensitive(wxScintilla * sc, int margin, bool sensitive);
	bool bmx_wxscintilla_getmarginsensitive(wxScintilla * sc, int margin);
	void bmx_wxscintilla_styleclearall(wxScintilla * sc);
	void bmx_wxscintilla_stylesetforeground(wxScintilla * sc, int style, MaxColour * fore);
	void bmx_wxscintilla_stylesetbackground(wxScintilla * sc, int style, MaxColour * back);
	void bmx_wxscintilla_stylesetbold(wxScintilla * sc, int style, bool bold);
	void bmx_wxscintilla_stylesetitalic(wxScintilla * sc, int style, bool italic);
	void bmx_wxscintilla_stylesetsize(wxScintilla * sc, int style, int sizePoints);
	void bmx_wxscintilla_stylesetfont(wxScintilla * sc, int style, BBString * fontName);
	void bmx_wxscintilla_styleseteolfilled(wxScintilla * sc, int style, bool filled);
	void bmx_wxscintilla_styleresetdefault(wxScintilla * sc);
	void bmx_wxscintilla_stylesetunderline(wxScintilla * sc, int style, bool underline);
	void bmx_wxscintilla_stylesetcase(wxScintilla * sc, int style, int caseForce);
	void bmx_wxscintilla_stylesetcharacterset(wxScintilla * sc, int style, int characterSet);
	void bmx_wxscintilla_stylesethotspot(wxScintilla * sc, int style, bool hotspot);
	void bmx_wxscintilla_setselforeground(wxScintilla * sc, bool useSetting, MaxColour * fore);
	void bmx_wxscintilla_setselbackground(wxScintilla * sc, bool useSetting, MaxColour * back);
	int bmx_wxscintilla_getselalpha(wxScintilla * sc);
	void bmx_wxscintilla_setselalpha(wxScintilla * sc, int alpha);
	void bmx_wxscintilla_setcaretforeground(wxScintilla * sc, MaxColour * fore);
	void bmx_wxscintilla_cmdkeyclearall(wxScintilla * sc);
	void bmx_wxscintilla_stylesetvisible(wxScintilla * sc, int style, bool visible);
	int bmx_wxscintilla_getcaretperiod(wxScintilla * sc);
	void bmx_wxscintilla_setcaretperiod(wxScintilla * sc, int periodMilliseconds);
	void bmx_wxscintilla_setwordchars(wxScintilla * sc, BBString * characters);
	void bmx_wxscintilla_beginundoaction(wxScintilla * sc);
	void bmx_wxscintilla_endundoaction(wxScintilla * sc);
	void bmx_wxscintilla_indicatorsetstyle(wxScintilla * sc, int indic, int style);
	int bmx_wxscintilla_indicatorgetstyle(wxScintilla * sc, int indic);
	void bmx_wxscintilla_indicatorsetforeground(wxScintilla * sc, int indic, MaxColour * fore);
	MaxColour * bmx_wxscintilla_indicatorgetforeground(wxScintilla * sc, int indic);
	void bmx_wxscintilla_setwhitespaceforeground(wxScintilla * sc, bool useSetting, MaxColour * fore);
	void bmx_wxscintilla_setwhitespacebackground(wxScintilla * sc, bool useSetting, MaxColour * back);
	void bmx_wxscintilla_setstylebits(wxScintilla * sc, int bits);
	int bmx_wxscintilla_getstylebits(wxScintilla * sc);
	void bmx_wxscintilla_setlinestate(wxScintilla * sc, int line, int state);
	int bmx_wxscintilla_getlinestate(wxScintilla * sc, int line);
	int bmx_wxscintilla_getmaxlinestate(wxScintilla * sc);
	bool bmx_wxscintilla_getcaretlinevisible(wxScintilla * sc);
	void bmx_wxscintilla_setcaretlinevisible(wxScintilla * sc, bool show);
	MaxColour * bmx_wxscintilla_getcaretlinebackground(wxScintilla * sc);
	void bmx_wxscintilla_setcaretlinebackground(wxScintilla * sc, MaxColour * back);
	void bmx_wxscintilla_stylesetchangeable(wxScintilla * sc, int style, bool changeable);
	void bmx_wxscintilla_autocompshow(wxScintilla * sc, int lenEntered, BBString * itemList);
	void bmx_wxscintilla_autocompcancel(wxScintilla * sc);
	bool bmx_wxscintilla_autocompactive(wxScintilla * sc);
	int bmx_wxscintilla_autocompposstart(wxScintilla * sc);
	void bmx_wxscintilla_autocompcomplete(wxScintilla * sc);
	void bmx_wxscintilla_autocompstops(wxScintilla * sc, BBString * characterSet);
	void bmx_wxscintilla_autocompsetseparator(wxScintilla * sc, int separatorCharacter);
	int bmx_wxscintilla_autocompgetseparator(wxScintilla * sc);
	void bmx_wxscintilla_autocompselect(wxScintilla * sc, BBString * text);
	void bmx_wxscintilla_autocompsetcancelatstart(wxScintilla * sc, bool cancel);
	bool bmx_wxscintilla_autocompgetcancelatstart(wxScintilla * sc);
	void bmx_wxscintilla_autocompsetfillups(wxScintilla * sc, BBString * characterSet);
	void bmx_wxscintilla_autocompsetchoosesingle(wxScintilla * sc, bool chooseSingle);
	bool bmx_wxscintilla_autocompgetchoosesingle(wxScintilla * sc);
	void bmx_wxscintilla_autocompsetignorecase(wxScintilla * sc, bool ignoreCase);
	bool bmx_wxscintilla_autocompgetignorecase(wxScintilla * sc);
	void bmx_wxscintilla_userlistshow(wxScintilla * sc, int listType, BBString * itemList);
	void bmx_wxscintilla_autocompsetautohide(wxScintilla * sc, bool autoHide);
	bool bmx_wxscintilla_autocompgetautohide(wxScintilla * sc);
	void bmx_wxscintilla_autocompsetdroprestofword(wxScintilla * sc, bool dropRestOfWord);
	bool bmx_wxscintilla_autocompgetdroprestofword(wxScintilla * sc);
	void bmx_wxscintilla_registerimage(wxScintilla * sc, int type, BBString * xpmData);
	void bmx_wxscintilla_clearregisteredimages(wxScintilla * sc);
	int bmx_wxscintilla_autocompgettypeseparator(wxScintilla * sc);
	void bmx_wxscintilla_autocompsettypeseparator(wxScintilla * sc, int separatorCharacter);
	void bmx_wxscintilla_autocompsetmaxwidth(wxScintilla * sc, int characterCount);
	int bmx_wxscintilla_autocompgetmaxwidth(wxScintilla * sc);
	void bmx_wxscintilla_autocompsetmaxheight(wxScintilla * sc, int rowCount);
	int bmx_wxscintilla_autocompgetmaxheight(wxScintilla * sc);
	void bmx_wxscintilla_setindent(wxScintilla * sc, int indentSize);
	int bmx_wxscintilla_getindent(wxScintilla * sc);
	void bmx_wxscintilla_setusetabs(wxScintilla * sc, bool useTabs);
	bool bmx_wxscintilla_getusetabs(wxScintilla * sc);
	void bmx_wxscintilla_setlineindentation(wxScintilla * sc, int line, int indentSize);
	int bmx_wxscintilla_getlineindentation(wxScintilla * sc, int line);
	int bmx_wxscintilla_getlineindentposition(wxScintilla * sc, int line);
	int bmx_wxscintilla_getcolumn(wxScintilla * sc, int pos);
	void bmx_wxscintilla_setusehorizontalscrollbar(wxScintilla * sc, bool show);
	bool bmx_wxscintilla_getusehorizontalscrollbar(wxScintilla * sc);
	void bmx_wxscintilla_setindentationguides(wxScintilla * sc, bool show);
	bool bmx_wxscintilla_getindentationguides(wxScintilla * sc);
	void bmx_wxscintilla_sethighlightguide(wxScintilla * sc, int column);
	int bmx_wxscintilla_gethighlightguide(wxScintilla * sc);
	int bmx_wxscintilla_getlineendposition(wxScintilla * sc, int line);
	int bmx_wxscintilla_getcodepage(wxScintilla * sc);
	MaxColour * bmx_wxscintilla_getcaretforeground(wxScintilla * sc);
	bool bmx_wxscintilla_getreadonly(wxScintilla * sc);
	void bmx_wxscintilla_setcurrentpos(wxScintilla * sc, int pos);
	void bmx_wxscintilla_setselectionstart(wxScintilla * sc, int pos);
	int bmx_wxscintilla_getselectionstart(wxScintilla * sc);
	void bmx_wxscintilla_setselectionend(wxScintilla * sc, int pos);
	int bmx_wxscintilla_getselectionend(wxScintilla * sc);
	void bmx_wxscintilla_setprintmagnification(wxScintilla * sc, int magnification);
	int bmx_wxscintilla_getprintmagnification(wxScintilla * sc);
	void bmx_wxscintilla_setprintcolourmode(wxScintilla * sc, int mode);
	int bmx_wxscintilla_getprintcolourmode(wxScintilla * sc);
	int bmx_wxscintilla_findtext(wxScintilla * sc, int minPos, int maxPos, BBString * text, int flags);
	int bmx_wxscintilla_formatrange(wxScintilla * sc, bool doDraw, int start, int end, MaxDC * draw, MaxDC * target, MaxRect * renderRect, MaxRect * pageRect);
	int bmx_wxscintilla_getfirstvisibleline(wxScintilla * sc);
	BBString * bmx_wxscintilla_getline(wxScintilla * sc, int line);
	int bmx_wxscintilla_getlinecount(wxScintilla * sc);
	void bmx_wxscintilla_setmarginleft(wxScintilla * sc, int pixelWidth);
	int bmx_wxscintilla_getmarginleft(wxScintilla * sc);
	void bmx_wxscintilla_setmarginright(wxScintilla * sc, int pixelWidth);
	int bmx_wxscintilla_getmarginright(wxScintilla * sc);
	bool bmx_wxscintilla_getmodify(wxScintilla * sc);
	void bmx_wxscintilla_setselection(wxScintilla * sc, int start, int end);
	BBString * bmx_wxscintilla_getselectedtext(wxScintilla * sc);
	BBString * bmx_wxscintilla_gettextrange(wxScintilla * sc, int start, int end);
	void bmx_wxscintilla_hideselection(wxScintilla * sc, bool normal);
	int bmx_wxscintilla_linefromposition(wxScintilla * sc, int pos);
	int bmx_wxscintilla_positionfromline(wxScintilla * sc, int line);
	void bmx_wxscintilla_linescroll(wxScintilla * sc, int columns, int lines);
	void bmx_wxscintilla_ensurecaretvisible(wxScintilla * sc);
	void bmx_wxscintilla_replaceselection(wxScintilla * sc, BBString * text);
	void bmx_wxscintilla_setreadonly(wxScintilla * sc, bool readOnly);
	bool bmx_wxscintilla_canpaste(wxScintilla * sc);
	bool bmx_wxscintilla_canundo(wxScintilla * sc);
	void bmx_wxscintilla_emptyundobuffer(wxScintilla * sc);
	void bmx_wxscintilla_undo(wxScintilla * sc);
	void bmx_wxscintilla_cut(wxScintilla * sc);
	void bmx_wxscintilla_copy(wxScintilla * sc);
	void bmx_wxscintilla_paste(wxScintilla * sc);
	void bmx_wxscintilla_clear(wxScintilla * sc);
	void bmx_wxscintilla_settext(wxScintilla * sc, BBString * text);
	BBString * bmx_wxscintilla_gettext(wxScintilla * sc);
	int bmx_wxscintilla_gettextlength(wxScintilla * sc);
	void bmx_wxscintilla_setovertype(wxScintilla * sc, bool overtype);
	bool bmx_wxscintilla_getovertype(wxScintilla * sc);
	void bmx_wxscintilla_setcaretwidth(wxScintilla * sc, int pixelWidth);
	int bmx_wxscintilla_getcaretwidth(wxScintilla * sc);
	void bmx_wxscintilla_settargetstart(wxScintilla * sc, int pos);
	int bmx_wxscintilla_gettargetstart(wxScintilla * sc);
	void bmx_wxscintilla_settargetend(wxScintilla * sc, int pos);
	int bmx_wxscintilla_gettargetend(wxScintilla * sc);
	int bmx_wxscintilla_replacetarget(wxScintilla * sc, BBString * text);
	int bmx_wxscintilla_replacetargetre(wxScintilla * sc, BBString * text);
	int bmx_wxscintilla_searchintarget(wxScintilla * sc, BBString * text);
	void bmx_wxscintilla_setsearchflags(wxScintilla * sc, int flags);
	int bmx_wxscintilla_getsearchflags(wxScintilla * sc);
	void bmx_wxscintilla_calltipshow(wxScintilla * sc, int pos, BBString * definition);
	void bmx_wxscintilla_calltipcancel(wxScintilla * sc);
	bool bmx_wxscintilla_calltipactive(wxScintilla * sc);
	int bmx_wxscintilla_calltipposatstart(wxScintilla * sc);
	void bmx_wxscintilla_calltipsethighlight(wxScintilla * sc, int start, int end);
	void bmx_wxscintilla_calltipsetbackground(wxScintilla * sc, MaxColour * back);
	void bmx_wxscintilla_calltipsetforeground(wxScintilla * sc, MaxColour * fore);
	void bmx_wxscintilla_calltipsetforegroundhighlight(wxScintilla * sc, MaxColour * fore);
	void bmx_wxscintilla_calltipusestyle(wxScintilla * sc, int tabSize);
	int bmx_wxscintilla_visiblefromdocline(wxScintilla * sc, int line);
	int bmx_wxscintilla_doclinefromvisible(wxScintilla * sc, int lineDisplay);
	int bmx_wxscintilla_wrapcount(wxScintilla * sc, int line);
	void bmx_wxscintilla_setfoldlevel(wxScintilla * sc, int line, int level);
	int bmx_wxscintilla_getfoldlevel(wxScintilla * sc, int line);
	int bmx_wxscintilla_getlastchild(wxScintilla * sc, int line, int level);
	int bmx_wxscintilla_getfoldparent(wxScintilla * sc, int line);
	void bmx_wxscintilla_showlines(wxScintilla * sc, int lineStart, int lineEnd);
	void bmx_wxscintilla_hidelines(wxScintilla * sc, int lineStart, int lineEnd);
	bool bmx_wxscintilla_getlinevisible(wxScintilla * sc, int line);
	void bmx_wxscintilla_setfoldexpanded(wxScintilla * sc, int line, bool expanded);
	bool bmx_wxscintilla_getfoldexpanded(wxScintilla * sc, int line);
	void bmx_wxscintilla_togglefold(wxScintilla * sc, int line);
	void bmx_wxscintilla_ensurevisible(wxScintilla * sc, int line);
	void bmx_wxscintilla_setfoldflags(wxScintilla * sc, int flags);
	void bmx_wxscintilla_ensurevisibleenforcepolicy(wxScintilla * sc, int line);
	void bmx_wxscintilla_settabindents(wxScintilla * sc, bool tabIndents);
	bool bmx_wxscintilla_gettabindents(wxScintilla * sc);
	void bmx_wxscintilla_setbackspaceunindents(wxScintilla * sc, bool bsUnIndents);
	bool bmx_wxscintilla_getbackspaceunindents(wxScintilla * sc);
	void bmx_wxscintilla_setmousedwelltime(wxScintilla * sc, int periodMilliseconds);
	int bmx_wxscintilla_getmousedwelltime(wxScintilla * sc);
	int bmx_wxscintilla_wordstartposition(wxScintilla * sc, int pos, bool onlyWordCharacters);
	int bmx_wxscintilla_wordendposition(wxScintilla * sc, int pos, bool onlyWordCharacters);
	void bmx_wxscintilla_setwrapmode(wxScintilla * sc, int mode);
	int bmx_wxscintilla_getwrapmode(wxScintilla * sc);
	void bmx_wxscintilla_setwrapvisualflags(wxScintilla * sc, int wrapVisualFlags);
	int bmx_wxscintilla_getwrapvisualflags(wxScintilla * sc);
	void bmx_wxscintilla_setwrapvisualflagslocation(wxScintilla * sc, int wrapVisualFlagsLocation);
	int bmx_wxscintilla_getwrapvisualflagslocation(wxScintilla * sc);
	void bmx_wxscintilla_setwrapstartindent(wxScintilla * sc, int indent);
	int bmx_wxscintilla_getwrapstartindent(wxScintilla * sc);
	void bmx_wxscintilla_setlayoutcache(wxScintilla * sc, int mode);
	int bmx_wxscintilla_getlayoutcache(wxScintilla * sc);
	void bmx_wxscintilla_setscrollwidth(wxScintilla * sc, int pixelWidth);
	int bmx_wxscintilla_getscrollwidth(wxScintilla * sc);
	int bmx_wxscintilla_textwidth(wxScintilla * sc, int style, BBString * text);
	void bmx_wxscintilla_setendatlastline(wxScintilla * sc, bool endAtLastLine);
	bool bmx_wxscintilla_getendatlastline(wxScintilla * sc);
	int bmx_wxscintilla_textheight(wxScintilla * sc, int line);
	void bmx_wxscintilla_setuseverticalscrollbar(wxScintilla * sc, bool show);
	bool bmx_wxscintilla_getuseverticalscrollbar(wxScintilla * sc);
	void bmx_wxscintilla_appendtext(wxScintilla * sc, BBString * text);
	bool bmx_wxscintilla_gettwophasedraw(wxScintilla * sc);
	void bmx_wxscintilla_settwophasedraw(wxScintilla * sc, bool twoPhase);
	void bmx_wxscintilla_targetfromselection(wxScintilla * sc);
	void bmx_wxscintilla_linesjoin(wxScintilla * sc);
	void bmx_wxscintilla_linessplit(wxScintilla * sc, int pixelWidth);
	void bmx_wxscintilla_setfoldmargincolour(wxScintilla * sc, bool useSetting, MaxColour * back);
	void bmx_wxscintilla_setfoldmarginhicolour(wxScintilla * sc, bool useSetting, MaxColour * fore);
	void bmx_wxscintilla_linedown(wxScintilla * sc);
	void bmx_wxscintilla_linedownextend(wxScintilla * sc);
	void bmx_wxscintilla_lineup(wxScintilla * sc);
	void bmx_wxscintilla_lineupextend(wxScintilla * sc);
	void bmx_wxscintilla_charleft(wxScintilla * sc);
	void bmx_wxscintilla_charleftextend(wxScintilla * sc);
	void bmx_wxscintilla_charright(wxScintilla * sc);
	void bmx_wxscintilla_charrightextend(wxScintilla * sc);
	void bmx_wxscintilla_wordleft(wxScintilla * sc);
	void bmx_wxscintilla_wordleftextend(wxScintilla * sc);
	void bmx_wxscintilla_wordright(wxScintilla * sc);
	void bmx_wxscintilla_wordrightextend(wxScintilla * sc);
	void bmx_wxscintilla_home(wxScintilla * sc);
	void bmx_wxscintilla_homeextend(wxScintilla * sc);
	void bmx_wxscintilla_lineend(wxScintilla * sc);
	void bmx_wxscintilla_lineendextend(wxScintilla * sc);
	void bmx_wxscintilla_documentstart(wxScintilla * sc);
	void bmx_wxscintilla_documentstartextend(wxScintilla * sc);
	void bmx_wxscintilla_documentend(wxScintilla * sc);
	void bmx_wxscintilla_documentendextend(wxScintilla * sc);
	void bmx_wxscintilla_pageup(wxScintilla * sc);
	void bmx_wxscintilla_pageupextend(wxScintilla * sc);
	void bmx_wxscintilla_pagedown(wxScintilla * sc);
	void bmx_wxscintilla_pagedownextend(wxScintilla * sc);
	void bmx_wxscintilla_edittoggleovertype(wxScintilla * sc);
	void bmx_wxscintilla_cancel(wxScintilla * sc);
	void bmx_wxscintilla_deleteback(wxScintilla * sc);
	void bmx_wxscintilla_tab(wxScintilla * sc);
	void bmx_wxscintilla_backtab(wxScintilla * sc);
	void bmx_wxscintilla_newline(wxScintilla * sc);
	void bmx_wxscintilla_formfeed(wxScintilla * sc);
	void bmx_wxscintilla_vchome(wxScintilla * sc);
	void bmx_wxscintilla_vchomeextend(wxScintilla * sc);
	void bmx_wxscintilla_zoomin(wxScintilla * sc);
	void bmx_wxscintilla_zoomout(wxScintilla * sc);
	void bmx_wxscintilla_delwordleft(wxScintilla * sc);
	void bmx_wxscintilla_delwordright(wxScintilla * sc);
	void bmx_wxscintilla_linecut(wxScintilla * sc);
	void bmx_wxscintilla_linedelete(wxScintilla * sc);
	void bmx_wxscintilla_linetranspose(wxScintilla * sc);
	void bmx_wxscintilla_lineduplicate(wxScintilla * sc);
	void bmx_wxscintilla_lowercase(wxScintilla * sc);
	void bmx_wxscintilla_uppercase(wxScintilla * sc);
	void bmx_wxscintilla_linescrolldown(wxScintilla * sc);
	void bmx_wxscintilla_linescrollup(wxScintilla * sc);
	void bmx_wxscintilla_deletebacknotline(wxScintilla * sc);
	void bmx_wxscintilla_homedisplay(wxScintilla * sc);
	void bmx_wxscintilla_homedisplayextend(wxScintilla * sc);
	void bmx_wxscintilla_lineenddisplay(wxScintilla * sc);
	void bmx_wxscintilla_lineenddisplayextend(wxScintilla * sc);
	void bmx_wxscintilla_homewrap(wxScintilla * sc);
	void bmx_wxscintilla_homewrapextend(wxScintilla * sc);
	void bmx_wxscintilla_lineendwrap(wxScintilla * sc);
	void bmx_wxscintilla_lineendwrapextend(wxScintilla * sc);
	void bmx_wxscintilla_vchomewrap(wxScintilla * sc);
	void bmx_wxscintilla_vchomewrapextend(wxScintilla * sc);
	void bmx_wxscintilla_linecopy(wxScintilla * sc);
	void bmx_wxscintilla_movecaretinsideview(wxScintilla * sc);
	int bmx_wxscintilla_linelength(wxScintilla * sc, int line);
	void bmx_wxscintilla_bracehighlight(wxScintilla * sc, int pos1, int pos2);
	void bmx_wxscintilla_bracebadlight(wxScintilla * sc, int pos);
	int bmx_wxscintilla_bracematch(wxScintilla * sc, int pos);
	bool bmx_wxscintilla_getvieweol(wxScintilla * sc);
	void bmx_wxscintilla_setvieweol(wxScintilla * sc, bool visible);
	void * bmx_wxscintilla_getdocpointer(wxScintilla * sc);
	void bmx_wxscintilla_setdocpointer(wxScintilla * sc, void * docPointer);
	void bmx_wxscintilla_setmodeventmask(wxScintilla * sc, int mask);
	int bmx_wxscintilla_getedgecolumn(wxScintilla * sc);
	void bmx_wxscintilla_setedgecolumn(wxScintilla * sc, int column);
	int bmx_wxscintilla_getedgemode(wxScintilla * sc);
	void bmx_wxscintilla_setedgemode(wxScintilla * sc, int mode);
	MaxColour * bmx_wxscintilla_getedgecolour(wxScintilla * sc);
	void bmx_wxscintilla_setedgecolour(wxScintilla * sc, MaxColour * edgeColour);
	void bmx_wxscintilla_searchanchor(wxScintilla * sc);
	int bmx_wxscintilla_searchnext(wxScintilla * sc, int flags, BBString * text);
	int bmx_wxscintilla_searchprev(wxScintilla * sc, int flags, BBString * text);
	int bmx_wxscintilla_linesonscreen(wxScintilla * sc);
	void bmx_wxscintilla_usepopup(wxScintilla * sc, bool allowPopUp);
	bool bmx_wxscintilla_selectionisrectangle(wxScintilla * sc);
	void bmx_wxscintilla_setzoom(wxScintilla * sc, int zoom);
	int bmx_wxscintilla_getzoom(wxScintilla * sc);
void * bmx_wxscintilla_createdocument(wxScintilla * sc);
void bmx_wxscintilla_addrefdocument(wxScintilla * sc, void * docPointer);
void bmx_wxscintilla_releasedocument(wxScintilla * sc, void * docPointer);
	int bmx_wxscintilla_getmodeventmask(wxScintilla * sc);
	void bmx_wxscintilla_setscifocus(wxScintilla * sc, bool focus);
	bool bmx_wxscintilla_getscifocus(wxScintilla * sc);
	void bmx_wxscintilla_setstatus(wxScintilla * sc, int statusCode);
	int bmx_wxscintilla_getstatus(wxScintilla * sc);
	void bmx_wxscintilla_setmousedowncaptures(wxScintilla * sc, bool captures);
	bool bmx_wxscintilla_getmousedowncaptures(wxScintilla * sc);
	void bmx_wxscintilla_setcontrolcharsymbol(wxScintilla * sc, int symbol);
	int bmx_wxscintilla_getcontrolcharsymbol(wxScintilla * sc);
	void bmx_wxscintilla_wordpartleft(wxScintilla * sc);
	void bmx_wxscintilla_wordpartleftextend(wxScintilla * sc);
	void bmx_wxscintilla_wordpartright(wxScintilla * sc);
	void bmx_wxscintilla_wordpartrightextend(wxScintilla * sc);
	void bmx_wxscintilla_setvisiblepolicy(wxScintilla * sc, int visiblePolicy, int visibleSlop);
	void bmx_wxscintilla_dellineleft(wxScintilla * sc);
	void bmx_wxscintilla_dellineright(wxScintilla * sc);
	void bmx_wxscintilla_setxoffset(wxScintilla * sc, int newOffset);
	int bmx_wxscintilla_getxoffset(wxScintilla * sc);
	void bmx_wxscintilla_choosecaretx(wxScintilla * sc);
	void bmx_wxscintilla_setxcaretpolicy(wxScintilla * sc, int caretPolicy, int caretSlop);
	void bmx_wxscintilla_setycaretpolicy(wxScintilla * sc, int caretPolicy, int caretSlop);
	void bmx_wxscintilla_setprintwrapmode(wxScintilla * sc, int mode);
	int bmx_wxscintilla_getprintwrapmode(wxScintilla * sc);
	void bmx_wxscintilla_sethotspotactiveforeground(wxScintilla * sc, bool useSetting, MaxColour * fore);
	void bmx_wxscintilla_sethotspotactivebackground(wxScintilla * sc, bool useSetting, MaxColour * back);
	void bmx_wxscintilla_sethotspotactiveunderline(wxScintilla * sc, bool underline);
	void bmx_wxscintilla_sethotspotsingleline(wxScintilla * sc, bool singleLine);
	void bmx_wxscintilla_paradown(wxScintilla * sc);
	void bmx_wxscintilla_paradownextend(wxScintilla * sc);
	void bmx_wxscintilla_paraup(wxScintilla * sc);
	void bmx_wxscintilla_paraupextend(wxScintilla * sc);
	int bmx_wxscintilla_positionbefore(wxScintilla * sc, int pos);
	int bmx_wxscintilla_positionafter(wxScintilla * sc, int pos);
	void bmx_wxscintilla_copyrange(wxScintilla * sc, int start, int end);
	void bmx_wxscintilla_setselectionmode(wxScintilla * sc, int mode);
	int bmx_wxscintilla_getselectionmode(wxScintilla * sc);
	int bmx_wxscintilla_getlineselstartposition(wxScintilla * sc, int line);
	int bmx_wxscintilla_getlineselendposition(wxScintilla * sc, int line);
	void bmx_wxscintilla_linedownrectextend(wxScintilla * sc);
	void bmx_wxscintilla_lineuprectextend(wxScintilla * sc);
	void bmx_wxscintilla_charleftrectextend(wxScintilla * sc);
	void bmx_wxscintilla_charrightrectextend(wxScintilla * sc);
	void bmx_wxscintilla_homerectextend(wxScintilla * sc);
	void bmx_wxscintilla_vchomerectextend(wxScintilla * sc);
	void bmx_wxscintilla_lineendrectextend(wxScintilla * sc);
	void bmx_wxscintilla_pageuprectextend(wxScintilla * sc);
	void bmx_wxscintilla_pagedownrectextend(wxScintilla * sc);
	void bmx_wxscintilla_stutteredpageup(wxScintilla * sc);
	void bmx_wxscintilla_stutteredpageupextend(wxScintilla * sc);
	void bmx_wxscintilla_stutteredpagedown(wxScintilla * sc);
	void bmx_wxscintilla_stutteredpagedownextend(wxScintilla * sc);
	void bmx_wxscintilla_wordleftend(wxScintilla * sc);
	void bmx_wxscintilla_wordleftendextend(wxScintilla * sc);
	void bmx_wxscintilla_wordrightend(wxScintilla * sc);
	void bmx_wxscintilla_wordrightendextend(wxScintilla * sc);
	void bmx_wxscintilla_setwhitespacechars(wxScintilla * sc, BBString * characters);
	void bmx_wxscintilla_setcharsdefault(wxScintilla * sc);
	int bmx_wxscintilla_autocompgetcurrent(wxScintilla * sc);
	void bmx_wxscintilla_allocate(wxScintilla * sc, int bytes);
	int bmx_wxscintilla_findcolumn(wxScintilla * sc, int line, int column);
	bool bmx_wxscintilla_getcaretsticky(wxScintilla * sc);
	void bmx_wxscintilla_setcaretsticky(wxScintilla * sc, bool useCaretStickyBehaviour);
	void bmx_wxscintilla_togglecaretsticky(wxScintilla * sc);
	void bmx_wxscintilla_setpasteconvertendings(wxScintilla * sc, bool convert);
	bool bmx_wxscintilla_getpasteconvertendings(wxScintilla * sc);
	void bmx_wxscintilla_selectionduplicate(wxScintilla * sc);
	void bmx_wxscintilla_setcaretlinebackgroundalpha(wxScintilla * sc, int alpha);
	int bmx_wxscintilla_getcaretlinebackgroundalpha(wxScintilla * sc);
	void bmx_wxscintilla_startrecord(wxScintilla * sc);
	void bmx_wxscintilla_stoprecord(wxScintilla * sc);
	void bmx_wxscintilla_setlexer(wxScintilla * sc, int lexer);
	int bmx_wxscintilla_getlexer(wxScintilla * sc);
	void bmx_wxscintilla_colourise(wxScintilla * sc, int start, int end);
	void bmx_wxscintilla_setproperty(wxScintilla * sc, BBString * key, BBString * value);
	void bmx_wxscintilla_setkeywords(wxScintilla * sc, int keywordSet, BBString * keyWords);
	void bmx_wxscintilla_setlexerlanguage(wxScintilla * sc, BBString * language);
	BBString * bmx_wxscintilla_getproperty(wxScintilla * sc, BBString * key);
	BBString * bmx_wxscintilla_getpropertyexpanded(wxScintilla * sc, BBString * key);
	int bmx_wxscintilla_getpropertyint(wxScintilla * sc, BBString * key);
	int bmx_wxscintilla_getstylebitsneeded(wxScintilla * sc);
//--Autogenerated

	int bmx_wxscintillaevent_getposition(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getkey(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getmodifiers(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getmodificationtype(wxScintillaEvent & event);
	BBString * bmx_wxscintillaevent_gettext(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getlength(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getlinesadded(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getline(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getfoldlevelnow(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getfoldlevelprev(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getmargin(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getmessage(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getwparam(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getlparam(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getlisttype(wxScintillaEvent & event);
	int bmx_wxscintillaevent_getx(wxScintillaEvent & event);
	int bmx_wxscintillaevent_gety(wxScintillaEvent & event);
	BBString * bmx_wxscintillaevent_getdragtext(wxScintillaEvent & event);
	bool bmx_wxscintillaevent_getdragallowmove(wxScintillaEvent & event);
	bool bmx_wxscintillaevent_getshift(wxScintillaEvent & event);
	bool bmx_wxscintillaevent_getcontrol(wxScintillaEvent & event);
	bool bmx_wxscintillaevent_getalt(wxScintillaEvent & event);
	int bmx_wxscintilla_geteventtype(int type);


}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

class MaxScintilla : public wxScintilla
{
public:
	MaxScintilla(BBObject * handle, wxWindow * parent, wxWindowID id, int x, int y, int w, int h, long style);
	~MaxScintilla();

private:
    DECLARE_EVENT_TABLE()	
};

